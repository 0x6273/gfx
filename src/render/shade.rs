// Copyright 2014 The Gfx-rs Developers.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Shader parameter handling.

use dev = device::shade;

/// Variable index of a uniform.
pub type VarUniform = u16;
/// Variable index of a uniform block.
pub type VarBlock = u8;
/// Variable index of a texture.
pub type VarTexture = u8;

/// Helper trait to transform base types into their corresponding uniforms
pub trait ToUniform {
    /// Create a `UniformValue` representing this value.
    fn to_uniform(&self) -> dev::UniformValue;
}

impl ToUniform for i32 {
    fn to_uniform(&self) -> dev::UniformValue {
        dev::ValueI32(*self)
    }
}

impl ToUniform for f32 {
    fn to_uniform(&self) -> dev::UniformValue {
        dev::ValueF32(*self)
    }
}

impl ToUniform for [i32, ..4] {
    fn to_uniform(&self) -> dev::UniformValue {
        dev::ValueI32Vec(*self)
    }
}

impl ToUniform for [f32, ..4] {
    fn to_uniform(&self) -> dev::UniformValue {
        dev::ValueF32Vec(*self)
    }
}

impl ToUniform for [[f32, ..4], ..4] {
    fn to_uniform(&self) -> dev::UniformValue {
        dev::ValueF32Matrix(*self)
    }
}

/// A texture parameter: consists of a texture handle with an optional sampler.
pub type TextureParam = (super::TextureHandle, Option<super::SamplerHandle>);

/// A closure provided for the `ShaderParam` implementor for uploading uniforms.
pub type FnUniform<'a> = |VarUniform, dev::UniformValue|: 'a;
/// A closure provided for the `ShaderParam` implementor for uploading uniform blocks.
pub type FnBlock  <'a> = |VarBlock, super::BufferHandle|: 'a;
/// A closure provided for the `ShaderParam` implementor for uploading textures.
pub type FnTexture<'a> = |VarTexture, TextureParam|: 'a;


/// Encloses a shader program with its parameter
pub trait ProgramShell {
    /// Get the contained program
    fn get_program(&self) -> super::ProgramHandle;
    /// Bind the parameters by invoking the corresponding closures
    fn bind<'a>(&self, FnUniform<'a>, FnBlock<'a>, FnTexture<'a>);
}

impl ProgramShell for super::ProgramHandle {
    fn get_program(&self) -> super::ProgramHandle {
        self.clone()
    }
    fn bind<'a>(&self, _: FnUniform<'a>, _: FnBlock<'a>, _: FnTexture<'a>) {
        //empty
    }
}

/// An error type on either the parameter storage or the program side
#[deriving(Clone, Show)]
pub enum ParameterError<'a> {
    /// Internal error
    ErrorInternal,
    /// Error with the named uniform
    ErrorUniform(&'a str),
    /// Error with the named uniform block
    ErrorBlock(&'a str),
    /// Error with the named texture.
    ErrorTexture(&'a str),
}

/// An error type for the link creation
#[deriving(Clone, Show)]
pub enum ParameterLinkError<'a> {
    /// Program is not valid
    ErrorBadProgram,
    /// A given parameter is not used by the program
    ErrorUnusedParameter(ParameterError<'a>),
    /// A program parameter that is not provided
    ErrorMissingParameter(ParameterError<'a>),
}

/// Abstracts the shader parameter structure, generated by the `shader_param` attribute
pub trait ShaderParam<L> {
    /// Creates a new link, self is passed as a workaround for Rust to not be lost in generics
    fn create_link(&self, &[dev::UniformVar], &[dev::BlockVar], &[dev::SamplerVar])
        -> Result<L, ParameterError<'static>>;
    /// Bind the parameters by invoking the corresponding closures
    fn bind<'a>(&self, &L, FnUniform<'a>, FnBlock<'a>, FnTexture<'a>);
}

/// A bundle that encapsulates a program and a custom user-provided
/// structure containing the program parameters.
/// # Type parameters:
///
/// * `L` - auto-generated structure that has a variable index for every field of T
/// * `T` - user-provided structure containing actual parameter values
#[deriving(Clone)]
pub struct CustomShell<L, T> {
    /// Shader program
    program: super::ProgramHandle,
    /// Hidden link that provides parameter indices for user data
    link: L,
    /// Global data in a user-provided struct
    pub data: T,
}

impl<L, T: ShaderParam<L>> CustomShell<L, T> {
    /// Create a new custom shell
    pub fn new(program: super::ProgramHandle, link: L, data: T) -> CustomShell<L, T> {
        CustomShell {
            program: program,
            link: link,
            data: data,
        }
    }
}

impl<L, T: ShaderParam<L>> ProgramShell for CustomShell<L, T> {
    fn get_program(&self) -> super::ProgramHandle {
        self.program
    }

    fn bind<'a>(&self, fu: FnUniform<'a>, fb: FnBlock<'a>, ft: FnTexture<'a>) {
        self.data.bind(&self.link, fu, fb, ft);
    }
}
